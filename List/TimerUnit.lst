C51 COMPILER V9.52.0.0   TIMERUNIT                                                         07/10/2018 10:50:11 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE TIMERUNIT
OBJECT MODULE PLACED IN .\Output\TimerUnit.obj
COMPILER INVOKED BY: D:\Program Files\Keil\C51\BIN\C51.EXE Source\TimerUnit.c BROWSE INCDIR(.\Include;.\Bsp) DEFINE(FOSC
                    -_160000) DEBUG OBJECTEXTEND PRINT(.\List\TimerUnit.lst) TABS(2) OBJECT(.\Output\TimerUnit.obj)

line level    source

   1          #define __TIMER_UNIT_C__
   2          #include "TimerUnit.h"
   3          #include "Common.h"
   4          #include "Log.h"
   5          
   6          sysServerTO_t SysTimerUnitServer(void)
   7          {
   8   1        uint8 i;
   9   1        for (i = 0; i < g_TimerServer.Total; i++)
  10   1        {
  11   2          if(g_TimerServer.TServer[i].TO > 0)
  12   2          {
  13   3            if(g_TimerServer.TServer[i].enable)
  14   3            {
  15   4              if((g_TimerServer.TServer[i].TO%10) == 0)
  16   4              {
  17   5                Log("\t[%bd] TO:%d\r\n", i, g_TimerServer.TServer[i].TO/10);
  18   5              }
  19   4              g_TimerServer.TServer[i].TO--;
  20   4            }
  21   3          }
  22   2          else
  23   2          {     
  24   3            Log("\t[%bd] Post: msgid:%d param:%d\r\n", g_TimerServer.TServer[i].Id, g_TimerServer.TServer[i].msg.ms
             -gID, g_TimerServer.TServer[i].msg.Param);
  25   3            QMsgPost(g_TimerServer.TServer[i].pQmsg, g_TimerServer.TServer[i].msg);
  26   3            
  27   3            if(i != g_TimerServer.Total - 1)
  28   3            {
  29   4              g_TimerServer.TServer[i].Id = g_TimerServer.TServer[g_TimerServer.Total-1].Id;
  30   4              g_TimerServer.TServer[i].pQmsg = g_TimerServer.TServer[g_TimerServer.Total-1].pQmsg;
  31   4              g_TimerServer.TServer[i].msg.msgID = g_TimerServer.TServer[g_TimerServer.Total-1].msg.msgID;
  32   4              g_TimerServer.TServer[i].msg.Param = g_TimerServer.TServer[g_TimerServer.Total-1].msg.Param;
  33   4              g_TimerServer.TServer[i].TO = g_TimerServer.TServer[g_TimerServer.Total-1].TO;
  34   4            }
  35   3            if(g_TimerServer.Total != 0)
  36   3            {
  37   4              g_TimerServer.Total--;
  38   4            }
  39   3          }
  40   2        }
  41   1        return TIMER_UNIT_SERVER_TICK;
  42   1      }
  43          #if 0
              void TimerUnitInit(TimerServer_t *this)
              {
                if(!this)
                {
                  return ;
                }
                g_TimerServer.Total = 0;
              }
              
              void TimerUnitDel(TimerServer_t *this, unsigned char *pname)
C51 COMPILER V9.52.0.0   TIMERUNIT                                                         07/10/2018 10:50:11 PAGE 2   

              {
                uint8 i;
                for(i = 0; i < g_TimerServer.Total; i++)
                { 
                  if((g_TimerServer.TServer.pName[0] == pname[0]) && (g_TimerServer.TServer.pName[1] == pname[1]))
                  {
                    if(i != g_TimerServer.Total - 1)
                    {
                      g_TimerServer.TServer[i].pName = g_TimerServer.TServer[g_TimerServer.Total-1].pName;
                      g_TimerServer.TServer[i].pQmsg = g_TimerServer.TServer[g_TimerServer.Total-1].pQmsg;
                      g_TimerServer.TServer[i].msg.msgID = g_TimerServer.TServer[g_TimerServer.Total-1].msg.msgID;
                      g_TimerServer.TServer[i].msg.Param = g_TimerServer.TServer[g_TimerServer.Total-1].msg.Param;
                      g_TimerServer.TServer[i].TO = g_TimerServer.TServer[g_TimerServer.Total-1].TO;
                    }
                    if(g_TimerServer.Total != 0)
                    {
                      g_TimerServer.Total--;
                    }
                  }
                }
              }
              
              void TimerUnitAdd(TimerServer_t *this, uint8 *pname, MSG_Q_t *pqmsg, MSG_t *pmsg, uint16 TO)
              {
                Log("\t\tTimerUnitAdd msgid:%d param:%d\r\n", pmsg->msgID, pmsg->Param);
                if((!this) || (!pname) || (!pmsg))
                {
                  return ;
                }
                if(g_TimerServer.Total >= TIMER_TABLE_MAX)
                {
                  return ;
                }
                else
                {
                  g_TimerServer.TServer[g_TimerServer.Total].pName = pname;
                  g_TimerServer.TServer[g_TimerServer.Total].TO = TO;
                  g_TimerServer.TServer[g_TimerServer.Total].pQmsg = pqmsg;
                  g_TimerServer.TServer[g_TimerServer.Total].msg.msgID = pmsg->msgID;
                  g_TimerServer.TServer[g_TimerServer.Total].msg.Param = pmsg->Param;
                  g_TimerServer.Total++;
                }
              }
              #else
  98          void TimerUnitInit(TimerServer_t *this)
  99          {
 100   1        if(!this)
 101   1        {
 102   2          return ;
 103   2        }
 104   1        g_TimerServer.Total = 0;
 105   1      }
 106          
 107          void TimerUnitDel(TimerServer_t *this, uint8 Id)
 108          {
 109   1        uint8 i;
 110   1        if(!this)
 111   1        {
 112   2          return ;
 113   2        }
 114   1        for(i = 0; i < g_TimerServer.Total; i++)
 115   1        { 
C51 COMPILER V9.52.0.0   TIMERUNIT                                                         07/10/2018 10:50:11 PAGE 3   

 116   2          if(g_TimerServer.TServer[i].Id == Id)
 117   2          {
 118   3            ENTER_CRITICAL();
 119   3            if(i != g_TimerServer.Total - 1)
 120   3            {
 121   4              g_TimerServer.TServer[i].Id = g_TimerServer.TServer[g_TimerServer.Total-1].Id;
 122   4              g_TimerServer.TServer[i].pQmsg = g_TimerServer.TServer[g_TimerServer.Total-1].pQmsg;
 123   4              g_TimerServer.TServer[i].msg.msgID = g_TimerServer.TServer[g_TimerServer.Total-1].msg.msgID;
 124   4              g_TimerServer.TServer[i].msg.Param = g_TimerServer.TServer[g_TimerServer.Total-1].msg.Param;
 125   4              g_TimerServer.TServer[i].TO = g_TimerServer.TServer[g_TimerServer.Total-1].TO;
 126   4              g_TimerServer.TServer[i].enable = g_TimerServer.TServer[g_TimerServer.Total-1].enable;
 127   4            }
 128   3            if(g_TimerServer.Total != 0)
 129   3            {
 130   4              g_TimerServer.Total--;
 131   4            }
 132   3            EXIT_CRITICAL();
 133   3          }
 134   2        }
 135   1      }
 136          
 137          void TimerUnitAdd(TimerServer_t *this, uint8 Id, MSG_Q_t *pqmsg, MSG_t *pmsg, uint16 TO)
 138          {
 139   1        uint8 i;
 140   1        Log("\t\tTimerUnitAdd msgid:%d param:%d\r\n", pmsg->msgID, pmsg->Param);
 141   1        if((!this) || (!pmsg))
 142   1        {
 143   2          return ;
 144   2        }
 145   1        else
 146   1        { 
 147   2          ENTER_CRITICAL();
 148   2          for(i = 0; i < g_TimerServer.Total; i++)
 149   2          { 
 150   3            if(g_TimerServer.TServer[i].Id == Id)
 151   3            {
 152   4              g_TimerServer.TServer[i].pQmsg = pqmsg;
 153   4              g_TimerServer.TServer[i].msg.msgID = pmsg->msgID;
 154   4              g_TimerServer.TServer[i].msg.Param = pmsg->Param;
 155   4              g_TimerServer.TServer[i].TO = TO;
 156   4              g_TimerServer.TServer[i].enable = true;
 157   4              
 158   4              break;
 159   4            }
 160   3          }
 161   2          if(g_TimerServer.Total < TIMER_TABLE_MAX)
 162   2          {     
 163   3            if(i == g_TimerServer.Total)
 164   3            {
 165   4              g_TimerServer.TServer[g_TimerServer.Total].Id = Id;
 166   4              g_TimerServer.TServer[g_TimerServer.Total].pQmsg = pqmsg;
 167   4              g_TimerServer.TServer[g_TimerServer.Total].msg.msgID = pmsg->msgID;
 168   4              g_TimerServer.TServer[g_TimerServer.Total].msg.Param = pmsg->Param;
 169   4              g_TimerServer.TServer[g_TimerServer.Total].TO = TO;
 170   4              g_TimerServer.TServer[g_TimerServer.Total].enable = true;
 171   4              g_TimerServer.Total++;
 172   4            }
 173   3          }
 174   2          EXIT_CRITICAL();
 175   2        }
 176   1      }
 177          void TimerUnitEnable(TimerServer_t *this, uint8 Id, uint8 enable)
C51 COMPILER V9.52.0.0   TIMERUNIT                                                         07/10/2018 10:50:11 PAGE 4   

 178          {
 179   1        if(!this)
 180   1        {
 181   2          return ;
 182   2        }
 183   1        if(Id >= g_TimerServer.Total)
 184   1        {
 185   2          return ;
 186   2        }
 187   1        
 188   1        ENTER_CRITICAL();
 189   1        g_TimerServer.TServer[Id].enable = enable;
 190   1        EXIT_CRITICAL();
 191   1      }
 192          uint8 TimerUnitIsExist(TimerServer_t *this, uint8 Id)
 193          { 
 194   1        if(!this)
 195   1        {
 196   2          return false;
 197   2        }
 198   1        if(Id >= g_TimerServer.Total)
 199   1        {
 200   2          return false;
 201   2        }
 202   1        
 203   1        if(g_TimerServer.TServer[Id].TO)
 204   1        {
 205   2          return true;
 206   2        }
 207   1        return false;
 208   1      }
 209          uint16 TimerUnitGetTO(TimerServer_t *this, uint8 Id)
 210          {
 211   1        if(!this)
 212   1        {
 213   2          return 0;
 214   2        }
 215   1        if(Id >= g_TimerServer.Total)
 216   1        {
 217   2          return 0;
 218   2        }
 219   1        return g_TimerServer.TServer[Id].TO;
 220   1      }
 221          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1346    ----
   CONSTANT SIZE    =     83    ----
   XDATA SIZE       =     12    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      18
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

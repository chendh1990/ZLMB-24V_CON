C51 COMPILER V9.52.0.0   COMMON                                                            07/10/2018 10:50:11 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE COMMON
OBJECT MODULE PLACED IN .\Output\Common.obj
COMPILER INVOKED BY: D:\Program Files\Keil\C51\BIN\C51.EXE Source\Common.c BROWSE INCDIR(.\Include;.\Bsp) DEFINE(FOSC_16
                    -0000) DEBUG OBJECTEXTEND PRINT(.\List\Common.lst) TABS(2) OBJECT(.\Output\Common.obj)

line level    source

   1          #define __COMMON_C__
   2          #include "Common.h"
   3          
   4          
   5          uint8 getCheckSum(uint8 const * const pBuffer, uint8 length)
   6          {
   7   1        uint8 i;
   8   1        uint8 checkSum = 0;
   9   1      
  10   1        for(i = 0; i < length; i ++)
  11   1        {
  12   2          checkSum += pBuffer[i];
  13   2        }
  14   1        return checkSum;
  15   1      }
  16          uint8 getHex(uint8 dat)
  17          {
  18   1        uint8 ret;
  19   1        if(dat <= 9)
  20   1        {
  21   2          ret = dat + '0';
  22   2        }
  23   1        else
  24   1        {
  25   2          ret = dat - 10 + 'A';
  26   2        }
  27   1        return ret;
  28   1      }
  29          /*****************************************************************************
  30          函数名称 : hex_to_bcd
  31          功能描述 : hex转bcd
  32          输入参数 : Value_H:高字节/Value_L:低字节
  33          返回参数 : bcd_value:转换完成后数据
  34          *****************************************************************************/
  35          uint8 hex_to_bcd(uint8 Value_H, uint8 Value_L)
  36          {
  37   1        uint8 bcd_value;
  38   1        
  39   1        if((Value_H >= '0') && (Value_H <= '9'))
  40   1          Value_H -= '0';
  41   1        else if((Value_H >= 'A') && (Value_H <= 'F'))
  42   1          Value_H = Value_H - 'A' + 10;
  43   1        else if((Value_H >= 'a') && (Value_H <= 'f'))
  44   1          Value_H = Value_H - 'a' + 10;
  45   1         
  46   1        bcd_value = Value_H & 0x0f;
  47   1        
  48   1        bcd_value <<= 4;
  49   1        if((Value_L >= '0') && (Value_L <= '9'))
  50   1          Value_L -= '0';
  51   1        else if((Value_L >= 'A') && (Value_L <= 'F'))
  52   1          Value_L = Value_L - 'a' + 10;
  53   1        else if((Value_L >= 'a') && (Value_L <= 'f'))
  54   1          Value_L = Value_L - 'a' + 10;
C51 COMPILER V9.52.0.0   COMMON                                                            07/10/2018 10:50:11 PAGE 2   

  55   1        
  56   1        bcd_value |= Value_L & 0x0f;
  57   1      
  58   1        return bcd_value;
  59   1      }
  60          
  61          /*****************************************************************************
  62          函数名称 : my_strlen
  63          功能描述 : 求字符串长度
  64          输入参数 : src:源地址
  65          返回参数 : len:数据长度
  66          *****************************************************************************/
  67          uint16 my_strlen(uint8 const *str)  
  68          {
  69   1        uint16 len = 0;
  70   1        if(str == NULL)
  71   1        { 
  72   2          return 0;
  73   2        }
  74   1        
  75   1        for(len = 0; *str ++ != '\0'; )
  76   1        {
  77   2          len ++;
  78   2        }
  79   1        
  80   1        return len;
  81   1      }
  82          #if 0
              /*****************************************************************************
              函数名称 : my_memset
              功能描述 : 把src所指内存区域的前count个字节设置成字符c
              输入参数 : src:源地址
                         ch:设置字符
                         count:设置数据长度
              返回参数 : src:数据处理完后的源地址
              *****************************************************************************/
              void *my_memset(void *src, uint8 ch, uint16 count)
              {
                uint8 *tmp = (uint8 *)src;
                
                if(src == NULL)
                {
                  return NULL;
                }
                
                while(count --)
                {
                  *tmp ++ = ch;
                }
                
                return src;
              }
              #endif
 108          /*****************************************************************************
 109          函数名称 : mymemcpy
 110          功能描述 : 内存拷贝
 111          输入参数 : dest:目标地址
 112                     src:源地址
 113                     count:数据拷贝数量
 114          返回参数 : src:数据处理完后的源地址
 115          *****************************************************************************/
 116          void *my_memcpy(void *dest, const void *src, uint16 count)  
C51 COMPILER V9.52.0.0   COMMON                                                            07/10/2018 10:50:11 PAGE 3   

 117          {  
 118   1        uint8 *pdest = (uint8 *)dest;  
 119   1        const uint8 *psrc  = (const uint8 *)src;  
 120   1        uint16 i;
 121   1        
 122   1        if(dest == NULL || src == NULL)
 123   1        { 
 124   2          return NULL;
 125   2        }
 126   1        
 127   1        if((pdest <= psrc) || (pdest > psrc + count))
 128   1        {  
 129   2          for(i = 0; i < count; i ++)
 130   2          {  
 131   3            pdest[i] = psrc[i];  
 132   3          }  
 133   2        }
 134   1        else
 135   1        {
 136   2          for(i = count; i > 0; i --)
 137   2          {  
 138   3            pdest[i - 1] = psrc[i - 1];  
 139   3          }  
 140   2        }  
 141   1        
 142   1        return dest;  
 143   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    419    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

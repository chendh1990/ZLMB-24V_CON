C51 COMPILER V9.52.0.0   KEY                                                               07/10/2018 10:50:11 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN .\Output\Key.obj
COMPILER INVOKED BY: D:\Program Files\Keil\C51\BIN\C51.EXE Bsp\Key.c BROWSE INCDIR(.\Include;.\Bsp) DEFINE(FOSC_160000) 
                    -DEBUG OBJECTEXTEND PRINT(.\List\Key.lst) TABS(2) OBJECT(.\Output\Key.obj)

line level    source

   1          #define __KEY_C__
   2          #include "Key.h"
   3          #include "Sys.h"
   4          #include "Peripheral.h"
   5          #include "Wifi.h"
   6          #include "Log.h"
   7          
   8          void KeyInit(void)
   9          {
  10   1        P03_Input_Mode;
  11   1        P04_Input_Mode;
  12   1        P05_Input_Mode;
  13   1      }
  14          static uint8 ReadKey(void)
  15          {
  16   1        uint8 key = 0x00;
  17   1      
  18   1        if(KEY_K1_PIN == 0)
  19   1        {
  20   2          key |= KEY_K1;
  21   2        }
  22   1        if(KEY_K2_PIN == 0)
  23   1        {
  24   2          key |= KEY_K2;
  25   2        }
  26   1        if(KEY_K3_PIN == 0)
  27   1        {
  28   2          key |= KEY_K3;
  29   2        }
  30   1        return key;
  31   1      }
  32          
  33          static uint8 KeyDetect(void)
  34          {
  35   1        uint8 key;
  36   1        key = ReadKey();
  37   1      
  38   1        if(key == 0x00) 
  39   1        {
  40   2          key = NO_KEY;
  41   2        }
  42   1        return key;
  43   1      }
  44          
  45          sysServerTO_t KeyScanServer(void)
  46          {
  47   1          static uint8 keyValue = 0;
  48   1        static uint16 keyCounter = 0;
  49   1          uint8 keyTmp = NO_KEY;
  50   1          uint8 key_return = NO_KEY;
  51   1        
  52   1          keyTmp = KeyDetect();
  53   1        if(keyTmp == NO_KEY )
  54   1        {
C51 COMPILER V9.52.0.0   KEY                                                               07/10/2018 10:50:11 PAGE 2   

  55   2          if (keyCounter >= KEY_LONG_TIMES)  //长按抬键
  56   2          {
  57   3            key_return = keyValue | KEY_LONG_UP;
  58   3          }
  59   2          else if (keyCounter >= KEY_SCAN_TIMES)   //短按抬键
  60   2          {
  61   3            key_return = keyValue | KEY_SHORT_UP;
  62   3          }
  63   2          keyValue = keyTmp;
  64   2          keyCounter = 0;
  65   2        }
  66   1          else if(keyTmp != keyValue)
  67   1          {
  68   2          keyValue = keyTmp;
  69   2          keyCounter = 0;
  70   2          } 
  71   1          else
  72   1          {
  73   2          keyCounter++;
  74   2          if (keyCounter == KEY_SCAN_TIMES)     //去抖
  75   2          {
  76   3            key_return = keyValue;
  77   3          }
  78   2          else if (keyCounter == KEY_LONG_TIMES)        //长按
  79   2          {
  80   3            key_return = keyValue | KEY_LONG;
  81   3          }
  82   2          else if (keyCounter == (KEY_LONG_TIMES + KEY_HOLD_TIMES) )      //连按
  83   2          {
  84   3            key_return = keyValue | KEY_HOLD;
  85   3            keyCounter = KEY_LONG_TIMES;
  86   3          }
  87   2          }
  88   1          if (key_return != NO_KEY)
  89   1          {
  90   2          QMsgPostSimple(&g_QMsg, SYS_MSG_KEY_ID, key_return);
  91   2          }
  92   1        return KEY_SCAN_SERVER_TICK;
  93   1      }
  94          void KeyHandle(const MSG_t *const pMsg)
  95          {
  96   1        if(!pMsg)
  97   1        {
  98   2          return ;
  99   2        }
 100   1        //Log("msgParm:%bx\r\n", (uint8)(pMsg->Param));
 101   1        switch (pMsg->Param)
 102   1        {
 103   2          case PS_K1:       //打开
 104   2            Log("PS_K1\r\n");
 105   2            QMsgPostSimple(&g_QMsg, SYS_MSG_WINDOW_ID, WINDOW_OPENING);
 106   2            break;
 107   2            
 108   2          case PS_K2:       //暂停
 109   2            Log("PS_K2\r\n");
 110   2            QMsgPostSimple(&g_QMsg, SYS_MSG_WINDOW_ID, WINDOW_PAUSE);
 111   2            break;
 112   2            
 113   2          case PS_K3:       //关闭
 114   2            Log("PS_K3\r\n"); 
 115   2            QMsgPostSimple(&g_QMsg, SYS_MSG_WINDOW_ID, WINDOW_CLOSING);
 116   2            break;
C51 COMPILER V9.52.0.0   KEY                                                               07/10/2018 10:50:11 PAGE 3   

 117   2            
 118   2          case PL_K1:       //smartconfig
 119   2            Log("PL_K1\r\n");
 120   2            QMsgPostSimple(&g_QMsg, SYS_MSG_WIFI_ID, WIFI_SMART_CONFIG);
 121   2            break;
 122   2            
 123   2          case PL_K2:       //smartconfig
 124   2            Log("PL_K2\r\n");
 125   2            QMsgPostSimple(&g_QMsg, SYS_MSG_WIFI_ID, WIFI_SMART_CONFIG);
 126   2            break;
 127   2            
 128   2          case PL_K3:       //smartconfig
 129   2            Log("PL_K3\r\n");
 130   2            QMsgPostSimple(&g_QMsg, SYS_MSG_WIFI_ID, WIFI_SMART_CONFIG);
 131   2            break;
 132   2            
 133   2          default:
 134   2            break;
 135   2        }
 136   1      }
 137          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    353    ----
   CONSTANT SIZE    =     48    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

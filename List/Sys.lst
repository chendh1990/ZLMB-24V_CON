C51 COMPILER V9.52.0.0   SYS                                                               07/10/2018 10:50:11 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE SYS
OBJECT MODULE PLACED IN .\Output\Sys.obj
COMPILER INVOKED BY: D:\Program Files\Keil\C51\BIN\C51.EXE Source\Sys.c BROWSE INCDIR(.\Include;.\Bsp) DEFINE(FOSC_16000
                    -0) DEBUG OBJECTEXTEND PRINT(.\List\Sys.lst) TABS(2) OBJECT(.\Output\Sys.obj)

line level    source

   1          #define __SYS_C__
   2          #include <stdio.h>
   3          #include "Common.h"
   4          #include "Key.h"
   5          #include "Led.h"
   6          #include "Timer.h"
   7          #include "TimerUnit.h"
   8          #include "Log.h"
   9          #include "Sys.h"
  10          #include "PacketQueue.h"
  11          #include "Peripheral.h"
  12          #include "Wifi.h"
  13          
  14          
  15          uint8 XDATA g_SystemNull _at_ 0x0000;   //防止指针指向其他XDATA变量，指向0x0000地址，
  16          
  17          static sysServerTO_t testServer(void);
  18          
  19          System_Server_t g_SystemServer[SYS_MAX_SERVER_ID] =
  20          {
  21            {
  22              KEY_SCAN_SERVER_TICK,
  23              KeyScanServer
  24            },
  25            {
  26              LED_SHOW_SERVER_TICK,
  27              LedShowServer
  28            },
  29            {
  30              TIMER_UNIT_SERVER_TICK,
  31              SysTimerUnitServer,
  32            },
  33            {
  34              100,
  35              testServer,
  36            }
  37          };
  38          
  39          
  40          static void ShowSoftInfo(void);
  41          static void SystemInitStatus(void);
  42          static void SystemRunStatus(void);
  43          static void SystemHandle(MSG_t XDATA *pMsg);
  44          
  45          
  46          static void ShowSoftInfo(void)
  47          {
  48   1        Log("***************************************\r\n");
  49   1        Log("Build at: %s  %s\r\n", __DATE__, __TIME__);  
  50   1        Log("FW_VER:1.%d\r\n", (uint16)(FW_VER));
  51   1        Log("----------------------------------------\r\n");
  52   1      }
  53          
  54          void SystemVarInit(void)
C51 COMPILER V9.52.0.0   SYS                                                               07/10/2018 10:50:11 PAGE 2   

  55          {
  56   1        g_SystemVar.SystemCurrentStatus = SYSTEM_INIT_STATUS;
  57   1        g_SystemVar.SystemLastStatus = SYSTEM_INIT_STATUS;
  58   1        g_SystemVar.SystemNextStatus = SYSTEM_INIT_STATUS;
  59   1      }
  60          void SystemStatusMachine(unsigned char SystemStatus)
  61          {
  62   1        switch(SystemStatus)
  63   1        {
  64   2          case SYSTEM_INIT_STATUS:
  65   2            SystemInitStatus();
  66   2            break;
  67   2          case SYSTEM_RUN_STATUS:
  68   2            SystemRunStatus();
  69   2            break;
  70   2          
  71   2          default:
  72   2            SystemRunStatus();
  73   2            break;
  74   2        }
  75   1        g_SystemVar.SystemLastStatus = g_SystemVar.SystemCurrentStatus;
  76   1        g_SystemVar.SystemCurrentStatus = SYSTEM_NULL_STATUS;
  77   1      }
  78          
  79          static void SystemInitStatus(void)
  80          {
  81   1        UartInit();
  82   1        QueueInit();
  83   1        WifiInit();
  84   1        TimerUnitInit(&g_TimerServer);
  85   1        QMsgInit(&g_QMsg, &g_MsgArray, MSG_NUM_MAX);
  86   1        ShowSoftInfo();
  87   1        
  88   1        PeriphralInit();
  89   1        TimerInit();
  90   1        QMsgPostSimple(&g_QMsg, SYS_MSG_INIT_ID, 0);
  91   1        g_SystemVar.SystemCurrentStatus = SYSTEM_RUN_STATUS;
  92   1      }
  93          
  94          static void SystemRunStatus(void)
  95          {
  96   1        Log("\r\nEntry system Run status.\r\n");
  97   1        g_SystemVar.SystemCurrentStatus = g_SystemVar.SystemNextStatus;
  98   1        while(g_SystemVar.SystemCurrentStatus == g_SystemVar.SystemNextStatus)
  99   1        { 
 100   2          if(QMsgPend(&g_QMsg, &g_Msg) == 0)
 101   2          {
 102   3            switch(g_Msg.msgID)
 103   3            {
 104   4              case SYS_MSG_INIT_ID: 
 105   4                g_RunState[0].sta = 0;
 106   4                g_RunState[0].BitState.closed = 1;
 107   4                break;
 108   4                
 109   4              default:
 110   4                SystemHandle(&g_Msg);
 111   4                break;
 112   4            }
 113   3          }
 114   2          WifiPacketParse();
 115   2          WifiStatusShow();
 116   2        }
C51 COMPILER V9.52.0.0   SYS                                                               07/10/2018 10:50:11 PAGE 3   

 117   1      }
 118          static void SystemHandle(MSG_t XDATA *pMsg)
 119          {
 120   1        if(!pMsg)
 121   1        {
 122   2          return ;
 123   2        }
 124   1      //  Log("pMsg->msgID:%x\r\n", pMsg->msgID);
 125   1        switch (pMsg->msgID)
 126   1        {
 127   2          case SYS_MSG_KEY_ID:
 128   2            KeyHandle(pMsg);
 129   2            break;  
 130   2          case SYS_MSG_WINDOW_ID:
 131   2            WindowHandle(pMsg);
 132   2            break;
 133   2          case SYS_MSG_WIFI_ID:
 134   2            WifiHandle(pMsg);
 135   2            break;
 136   2          default:
 137   2            break;
 138   2        }
 139   1      }
 140          void SystemServerRun(void)
 141          {
 142   1        uint8 id;
 143   1        for(id = 0; id < SYS_MAX_SERVER_ID; id++)
 144   1        {
 145   2          if(g_SystemServer[id].TO != SERVER_DISABLE)
 146   2          {
 147   3            if(g_SystemServer[id].TO > 0)
 148   3            {
 149   4              if(--g_SystemServer[id].TO == 0)
 150   4              {
 151   5                if(g_SystemServer[id].server != null)
 152   5                {
 153   6                  g_SystemServer[id].TO = (*g_SystemServer[id].server)();
 154   6                }
 155   5              }
 156   4            }
 157   3          }
 158   2        }
 159   1      }
 160          
 161          static sysServerTO_t testServer(void)
 162          {
 163   1      /*
 164   1        static uint8 XDATA flash = 0;
 165   1      
 166   1        if(flash&1)
 167   1        {
 168   1          LedSetLevel(LED_WORK_ID, HIGH, true);
 169   1        }
 170   1        else
 171   1        {
 172   1          LedSetLevel(LED_WORK_ID, LOW, true);
 173   1        }
 174   1        flash++;
 175   1      */
 176   1        return 100;
 177   1      }

C51 COMPILER V9.52.0.0   SYS                                                               07/10/2018 10:50:11 PAGE 4   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    400    ----
   CONSTANT SIZE    =    168    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
